# Copyright (c) 2022, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import List, Optional, Generator

from .config_generator_interface import ConfigGeneratorInterface

from model_analyzer.config.generate.search_config import SearchConfig
from model_analyzer.config.generate.brute_run_config_generator import BruteRunConfigGenerator
from model_analyzer.config.generate.quick_run_config_generator import QuickRunConfigGenerator
from model_analyzer.config.generate.model_variant_name_manager import ModelVariantNameManager
from model_analyzer.config.run.run_config import RunConfig
from model_analyzer.triton.client.client import TritonClient
from model_analyzer.device.gpu_device import GPUDevice
from model_analyzer.config.input.config_command_profile import ConfigCommandProfile
from model_analyzer.config.generate.model_profile_spec import ModelProfileSpec
from model_analyzer.result.result_manager import ResultManager
from model_analyzer.result.run_config_measurement import RunConfigMeasurement
from model_analyzer.result.run_config_result import RunConfigResult

from model_analyzer.constants import LOGGER_NAME
from model_analyzer.config.input.config_defaults import DEFAULT_RUN_CONFIG_MIN_CONCURRENCY, DEFAULT_RUN_CONFIG_MAX_CONCURRENCY

from copy import deepcopy

import logging

logger = logging.getLogger(LOGGER_NAME)


class QuickPlusConcurrencySweepRunConfigGenerator(ConfigGeneratorInterface):
    """
    First run QuickRunConfigGenerator for a hill climbing search, then use 
    Brute for a concurrency sweep of the default and Top N results
    """

    def __init__(self, search_config: SearchConfig,
                 config: ConfigCommandProfile, gpus: List[GPUDevice],
                 models: List[ModelProfileSpec], client: TritonClient,
                 result_manager: ResultManager,
                 model_variant_name_manager: ModelVariantNameManager):
        """
        Parameters
        ----------
        search_config: SearchConfig
            Defines parameters and dimensions for the search
        config: ConfigCommandProfile
            Profile configuration information
        gpus: List of GPUDevices
        models: List of ConfigModelProfileSpec
            List of models to profile
        client: TritonClient
        result_manager: ResultManager
            The object that handles storing and sorting the results from the perf analyzer
        model_variant_name_manager: ModelVariantNameManager
            Maps model variants to config names
        
        model_variant_name_manager: ModelVariantNameManager
        """
        self._search_config = search_config
        self._config = config
        self._gpus = gpus
        self._models = models
        self._client = client
        self._result_manager = result_manager
        self._model_variant_name_manager = model_variant_name_manager

    def set_last_results(
            self, measurements: List[Optional[RunConfigMeasurement]]) -> None:
        self._rcg.set_last_results(measurements)

    def get_configs(self) -> Generator[RunConfig, None, None]:
        """
        Returns
        -------
        RunConfig
            The next RunConfig generated by this class
        """

        logger.info("")
        logger.info("Starting quick mode search to find optimal configs")
        logger.info("")
        yield from self._execute_quick_search()
        logger.info("")
        logger.info(
            "Done with quick mode search. Gathering concurrency sweep measurements for reports"
        )
        logger.info("")
        yield from self._sweep_concurrency_over_top_results()
        logger.info("")
        logger.info("Done gathering concurrency sweep measurements for reports")
        logger.info("")

    def _execute_quick_search(self) -> Generator[RunConfig, None, None]:
        self._rcg: ConfigGeneratorInterface = self._create_quick_run_config_generator(
        )

        yield from self._rcg.get_configs()

    def _create_quick_run_config_generator(self) -> QuickRunConfigGenerator:
        return QuickRunConfigGenerator(
            search_config=self._search_config,
            config=self._config,
            gpus=self._gpus,
            models=self._models,
            client=self._client,
            model_variant_name_manager=self._model_variant_name_manager)

    def _sweep_concurrency_over_top_results(
            self) -> Generator[RunConfig, None, None]:
        top_results = self._result_manager.top_n_results(
            n=self._config.num_configs_per_model, include_default=True)

        for count, result in enumerate(top_results):
            # new_config = self._create_new_config_command_profile(result)
            # new_models = self._create_new_models(result, self._models)

            run_config = deepcopy(result.run_config())
            for concurrency in (2**i for i in range(0, 10)):
                run_config = self._set_concurrency(run_config, concurrency)

                # this is to get the default
                if count == 0:
                    self._rcg = self._create_brute_run_config_generator(
                        self._config, self._models, skip_default_config=False)

                    yield from self._rcg.get_configs()
                else:
                    yield run_config

    def _create_new_config_command_profile(
            self, result: RunConfigResult) -> ConfigCommandProfile:
        new_config = deepcopy(self._config)
        new_config = self._set_search_mode(new_config)

        return new_config

    def _create_new_models(
            self, result: RunConfigResult,
            models: List[ModelProfileSpec]) -> List[ModelProfileSpec]:
        new_models = deepcopy(self._models)
        new_models = self._set_parameters(result, new_models)

        return new_models

    def _create_brute_run_config_generator(
            self, new_config: ConfigCommandProfile,
            new_models: List[ModelProfileSpec],
            skip_default_config: bool) -> BruteRunConfigGenerator:
        return BruteRunConfigGenerator(
            config=new_config,
            gpus=self._gpus,
            models=new_models,
            client=self._client,
            model_variant_name_manager=self._model_variant_name_manager,
            skip_default_config=skip_default_config)

    def _set_search_mode(self,
                         config: ConfigCommandProfile) -> ConfigCommandProfile:
        config.run_config_search_mode = 'brute'
        config.run_config_search_disable = True
        config.early_exit_enable = True

        return config

    def _set_parameters(
            self, result: RunConfigResult,
            models: List[ModelProfileSpec]) -> List[ModelProfileSpec]:
        batch_sizes = self._find_batch_sizes(result)
        models = self._set_batch_sizes(models, batch_sizes)

        instance_counts = self._find_instance_counts(result)
        models = self._set_instance_counts(models, instance_counts)

        return models

    def _find_batch_sizes(self, result: RunConfigResult) -> List[int]:
        batch_sizes = []
        for model_run_config in result.run_config().model_run_configs():
            model_config = model_run_config.model_config().get_config()

            if 'max_batch_size' in model_config:
                batch_sizes.append(model_config['max_batch_size'])
            else:
                batch_sizes.append(1)

        return batch_sizes

    def _find_instance_counts(self, result: RunConfigResult) -> List[int]:
        instance_counts = []
        for model_run_config in result.run_config().model_run_configs():
            model_config = model_run_config.model_config().get_config()
            instance_counts.append(model_config['instance_group'][0]['count'])

        return instance_counts

    def _set_batch_sizes(self, models: List[ModelProfileSpec],
                         batch_sizes: List[int]) -> List[ModelProfileSpec]:
        for i, model in enumerate(models):
            parameters = model.parameters()
            parameters['batch_sizes'] = [batch_sizes[i]]

        return models

    def _set_instance_counts(
            self, models: List[ModelProfileSpec],
            instance_counts: List[int]) -> List[ModelProfileSpec]:
        # FIXME: TODO

        return models

    def _set_concurrency(self, run_config: RunConfig,
                         concurrency: int) -> RunConfig:
        for model_run_config in run_config.model_run_configs():
            perf_config = model_run_config.perf_config()
            perf_config.update_config({'concurrency-range': concurrency})

        return run_config